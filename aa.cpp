
#include<stdio.h>?
#include<malloc.h>?

struct?pnode?/*定义结点的结构体*/?
{?
int?code;?/*系数*/?
int?exp;?//指数?
struct?pnode?*next;
?};??
s

truct?pnode?*poly()?/*生成多项式链表的函数*/?
{?
struct?pnode?*head,*r,*s;?
int?m,n;?

head=(struct?pnode?*)malloc(sizeof(struct?pnode));/*建立一个头结点*/
?r=head;?
printf("输入系数n和指数m:");
?scanf("%d,%d",&n,&m);?
while(n!=0)?
{?
s=(struct?pnode?*)malloc(sizeof(struct?pnode));/*建立结点*/?
s->code=n;?
s->exp=m;?

r->next=s;/*把结点s连接到r所指向的头结点之后，然后把指针r后移，r指向s结点*/?
r=s;?

printf("输入系数n和指数m");
?scanf("%d,%d",&n,&m);
?}

r->next=NULL;??/*删除掉头结点*/
head=head->next;?
return(head);?
}??

struct?pnode?*padd(heada,headb)?/*两个多项式相加的函数*/?
struct?pnode?*heada,*headb;?
{?
?struct?pnode?*headc,*p,*q,*r,*s;
??int?x;??
p=heada;??
q=headb;?

headc=(struct?pnode?*)malloc(sizeof(struct?pnode));?
r=headc;?

while(p!=NULL&&q!=NULL)?
{?
?
if(p->exp==q->exp)???/*两结点的指数相等时，将两节点的系数相加，然后存入结点s中*/?
?
{?x=p->code+q->code;??
if(x!=0)?
?
{?s=(struct?pnode?*)malloc(sizeof(struct?pnode));????
s->code=x;???
?s->exp=p->exp;???
?r->next=s;???
?r=s;??
}?
?p=p->next;?
?q=q->next;?
}?

else/*当两个结点的指数不相等时，将指数较小的结点复制成一个新的结点插入到C中*/?

if(p->exp>q->exp)?
{?
?s=(struct?pnode?*)malloc(sizeof(struct?pnode));
??s->code=q->code;?
?s->exp=q->exp;?
?r->next=s;??
r=s;?
?
q=q->next;?
}?
else?
{?
?s=(struct?pnode?*)malloc(sizeof(struct?pnode));
??s->code=p->code;
s->exp=p->exp;?
?r->next=s;??
r=s;?
?
p=p->next;?
}?
}?

while(p!=NULL)
?{?
?s=(struct?pnode?*)malloc(sizeof(struct?pnode));
??s->code=p->code;?
?s->exp=p->exp;??
r->next=s;??
r=s;?
?
p=p->next;
?}?

while(q!=NULL)?
{?
?s=(struct?pnode?*)malloc(sizeof(struct?pnode));?
?s->code=q->code;?
?s->exp=q->exp;?
?r->next=s;
??r=s;?
?
q=q->next;?
}?

r->next=NULL;
?s=headc;?

headc=headc->next;
?free(s);
?
return(headc);
?}??


else/*当两个结点的指数不相等时，将指数较小的结点复制成一个新的结点插入到C中*/

if(p->exp>q->exp)?
{?
?s=(struct?pnode?*)malloc(sizeof(struct?pnode));
??s->code=-(q->code);?
?s->exp=q->exp;??
r->next=s;?
?r=s;?
?
q=q->next;
?}
?else?
{?
?s=(struct?pnode?*)malloc(sizeof(struct?pnode));
??s->code=p->code;
??s->exp=p->exp;
??r->next=s;
??r=s;
?
?p=p->next;
?}?
}?

while(p!=NULL)?
{?
?s=(struct?pnode?*)malloc(sizeof(struct?pnode));
??s->code=p->code;
??s->exp=p->exp;
??r->next=s;
??r=s;
?
?p=p->next;?
}?

while(q!=NULL)
?{?
?s=(struct?pnode?*)malloc(sizeof(struct?pnode));
s->code=-(q->code);??
s->exp=q->exp;??
r->next=s;??
r=s;?

?q=q->next;
?}?

r->next=NULL;
?s=headd;
?
headd=headd->next;?
free(s);
?
return(headd);
?}??

void?listprintf(struct?pnode?*head)
?{struct?pnode?*p,*p1;?
?p=head;?

?while(p!=NULL)
??{p1=p;?
?
?p=p->next;?
?
?if(p1->next!=NULL&&p->code>0)?
?
?printf("%dx%d+",p1->code,p1->exp);?
??else?printf("%dx%d",p1->code,p1->exp);
??}?
?printf("\n");?}??

main()?
{?
?
struct?pnode?*heada,*headb,*headc,*headd;??
heada=poly();?
?headb=poly();?
?
headc=padd(heada,headb);?

?headd=psubtract(heada,headb);
??listprintf(heada);?
?listprintf(headb);??
listprintf(headc);??
listprintf(headd);?
}